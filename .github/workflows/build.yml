name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run tests
        run: cargo test --verbose

  build:
    name: Build
    needs: test
    strategy:
      matrix:
        include:
          # Apple ARM (M1/M2)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
            
          # Windows 64-bit MSVC
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
            
          # Linux 64-bit musl
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x64
            
          # Linux ARM musl
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Install musl tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          
      - name: Install cross-compilation tools (Linux ARM)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
      - name: Build server
        run: cargo build --release --bin server --target ${{ matrix.target }}
        
      - name: Build client
        run: cargo build --release --bin client --target ${{ matrix.target }}
        
      - name: Create release directory
        shell: bash
        run: |
          mkdir -p release
          
      - name: Copy binaries (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/server release/
          cp target/${{ matrix.target }}/release/client release/
          
      - name: Copy binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/server.exe release/
          cp target/${{ matrix.target }}/release/client.exe release/
          
      - name: Copy configuration files
        run: |
          cp server/.env.example release/server.env.example
          cp client/.env.example release/client.env.example
          cp README.md release/
          cp README.en.md release/
          cp INSTALL.md release/
          cp INSTALL_en.md release/
          
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd release
          tar -czf ../pc-status-${{ matrix.name }}.tar.gz *
          
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd release
          7z a ../pc-status-${{ matrix.name }}.zip *
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pc-status-${{ matrix.name }}
          path: |
            pc-status-${{ matrix.name }}.tar.gz
            pc-status-${{ matrix.name }}.zip
          if-no-files-found: ignore

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            pc-status-*/pc-status-*.tar.gz
            pc-status-*/pc-status-*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
